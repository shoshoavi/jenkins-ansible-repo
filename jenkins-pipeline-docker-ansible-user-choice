pipeline {
    agent any
    parameters {
        choice(
            choices: ['Service 1 - Build image and container', 'Service 2 - Build image and container'],
            description: 'Please Choose the Service you want to build',
            name: 'Choose_Service'
        )
        string(name: 'DOCKERHUB_USERNAME', defaultValue: '', description: 'Enter your Docker Hub username')
        string(name: 'WEBSERVER_HOST', defaultValue: '', description: 'Enter the IP address of the web server')
        string(name: 'HOST_USERNAME', defaultValue: '', description: 'Enter the username for the host')
    }

    environment {
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub-credentials'
    }

    stages {
        stage('User choice selection') {
            steps {
                script {
                    if (params.Choose_Service == 'Service 1 - Build image and container') {
                        echo "User selected Service 1: Building image and container"
                        buildService(serviceName: 'Service1', imageName: 'IMAGE_NAME_Service1', imageTag: 'IMAGE_TAG_Service1', dockerImage: 'SERVICE1_IMAGE')
                    } else if (params.Choose_Service == 'Service 2 - Build image and container') {
                        echo "User selected Service 2: Building image and container"
                        buildService(serviceName: 'Service2', imageName: 'IMAGE_NAME_Service2', imageTag: 'IMAGE_TAG_Service2', dockerImage: 'SERVICE2_IMAGE')
                    } else {
                        error("Invalid choice: ${params.Choose_Service}")
                    }
                }
            }
        }
    }
}

def buildService(serviceName, imageName, imageTag, dockerImage) {
    stage('Build Dockerfile') {
        script {
            def dockerfileContent = """
            FROM ${dockerImage}
            CMD ["sh"]
            """
            writeFile file: "${serviceName}_Dockerfile", text: dockerfileContent
        }
    }

    stage('Build Docker Image') {
        script {
            sh "docker build -t ${imageName}:${imageTag} ."
        }
    }

    stage('Tag and Push Docker Image') {
        script {
            withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS_ID}", passwordVariable: 'DOCKERHUB_PASSWORD', usernameVariable: 'DOCKERHUB_USERNAME')]) {
                sh "echo ${DOCKERHUB_PASSWORD} | docker login -u ${params.DOCKERHUB_USERNAME} --password-stdin"
            }
            sh "docker tag ${imageName}:${imageTag} ${params.DOCKERHUB_USERNAME}/${imageName}:${imageTag}"
            sh "docker push ${params.DOCKERHUB_USERNAME}/${imageName}:${imageTag}"
        }
    }

    stage('Make hosts file') {
        script {
            writeFile file: 'hosts', text: """
            [webservers]
            ${params.WEBSERVER_HOST} ansible_user=${params.HOST_USERNAME}
            """
        }
    }

    stage('Deploy with Ansible') {
        script {
            def ansible_playbookContent = """
            ---
            - hosts: webservers
              become: yes

            vars:
              docker_hub_username: "${params.DOCKERHUB_USERNAME}"
              docker_image_name: "${imageName}"
              docker_image_tag: "${imageTag}"

            tasks:
              - name: Pull Docker image from Docker Hub
                docker_image:
                  name: "{{ docker_hub_username }}/{{ docker_image_name }}"
                  tag: "{{ docker_image_tag }}"

              - name: Run new container
                docker_container:
                  name: mycontainer${serviceName.toLowerCase().replaceAll(' ', '')}
                  image: "{{ docker_hub_username }}/{{ docker_image_name }}:{{ docker_image_tag }}"
                  state: started
            """
            writeFile file: "${serviceName}_deploy-playbook.yml", text: ansible_playbookContent
            sh 'ansible-playbook -i hosts ${serviceName}_deploy-playbook.yml -e "ansible_ssh_common_args=\'-o StrictHostKeyChecking=no\'"'
        }
    }
}
